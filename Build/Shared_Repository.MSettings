// Copyright Â© 2021 Nonna Holding AB
// Distributed under the MIT license, see license text in LICENSE.Malterlib

Property
{
	MalterlibRepositoryEditor define string // User(Tools)="open -a SourceTree {}": Specify the editor to use for repositories. {} is replaced with the repository directory. The tool is launched from the repository directory.
	MalterlibRepositoryEditorSequential define bool = false // User(Tools)=true: Set to true if your repository editor does not support launching concurrently
	MalterlibRepositoryEditorSleep define float = 0.0
	MalterlibRepoRoot define string?
	MalterlibRepositoryEditorWorkingDir define string = ""
}
Property
{
	!!HostPlatformFamily "OSX"

	MalterlibRepositoryEditor "open -a \"Sublime Merge\" {}"
	{
		&
 		{
			MalterlibRepositoryEditor undefined
			![] "/Applications"->FindDirectoriesIn("Sublime Merge.app")
 		}
	}
	MalterlibRepositoryEditorSequential true
	{
		&
		{
			MalterlibRepositoryEditorSequential undefined
			MalterlibRepositoryEditor "open -a \"Sublime Merge\" {}"
		}
	}

	MalterlibRepositoryEditor "/usr/local/bin/fork status"
	{
		&
		{
			MalterlibRepositoryEditor undefined
			![] "/usr/local/bin"->FindFilesIn("fork")
		}
	}
	MalterlibRepositoryEditor "open -a SourceTree {}"
	{
		&
		{
			MalterlibRepositoryEditor undefined
			![] "/Applications"->FindDirectoriesIn("SourceTree.app")
		}
	}
}
Property
{
	!!HostPlatformFamily "Windows"

	MalterlibRepositoryEditor EscapeHost(`@(PROGRAMFILES)/Sublime Merge/smerge.exe`, "{}")
	{
		&
 		{
			MalterlibRepositoryEditor undefined
			![] `@(PROGRAMFILES)/Sublime Merge`->FindFilesIn("smerge.exe")
 		}
	}

	SourceTreeDirectory define string
	SourceTreeDirectory `@(USERPROFILE)/AppData/Local/SourceTree`
	{
		!!SourceTreeDirectory undefined
	}

	SourceTreeEditor define string
	SourceTreeEditor EscapeHost(`@(SourceTreeDirectory)/SourceTree.exe`, "-f", "{}", "status")

	MalterlibRepositoryEditor SourceTreeEditor
	{
		&
		{
			MalterlibRepositoryEditor undefined
			![] SourceTreeDirectory->FindFilesIn("SourceTree.exe")
		}
	}
	MalterlibRepositoryEditorSequential true
	{
		&
		{
			MalterlibRepositoryEditorSequential undefined
			MalterlibRepositoryEditor SourceTreeEditor
		}
	}
	MalterlibRepositoryEditorWorkingDir SourceTreeDirectory
	{
		&
		{
			MalterlibRepositoryEditorWorkingDir undefined
			MalterlibRepositoryEditor SourceTreeEditor
		}
	}
	MalterlibRepositoryEditorSleep 1.0
	{
		&
		{
			MalterlibRepositoryEditorWorkingDir undefined
			MalterlibRepositoryEditor SourceTreeEditor
		}
	}
}

Repository
{
	ConvertUnderscoreToPath define bool = false

	UserEmail define string = "" // User(Repository)=email@example.com: Specify user.email to configure for repositories
	UserName define string = "" // User(Repository)="Example Name": Specify user.name to configure for repositories

	GithubCompany define string?
	DefaultPrefix define string?
	DefaultLocationPrefix define string?

	NoPushRemotes ["upstream*"]
	{
		!!Repository.NoPushRemotes undefined
	}

	DefaultRoot define string = "Whata"
	DefaultRoot `https://github.com/@(Repository.GithubCompany)`
	{
		&
		{
			Repository.DefaultRoot undefined
			!Repository.GithubCompany undefined
		}
	}

	DefaultPrefix `@(Repository.GithubCompany)_`
	{
		&
		{
			Repository.DefaultPrefix undefined
			!Repository.GithubCompany undefined
		}
	}

	DefaultLocationPrefix Repository.DefaultPrefix->Replace("_", "/")
	{
		&
		{
			Repository.DefaultLocationPrefix undefined
			!Repository.DefaultPrefix undefined
		}
	}

	Type "Direct"
	{
		!!Repository.Type undefined
	}

	MalterlibRoot define string
	MalterlibRoot MalterlibRepoRoot
	{
		&
		{
			Repository.MalterlibRoot undefined
			!MalterlibRepoRoot undefined
		}
	}

	MalterlibRoot "https://github.com/Malterlib"
	{
		!!Repository.MalterlibRoot undefined
	}

	ExternalRoot define string
	ExternalRoot "https://github.com/Malterlib"
	{
		!!Repository.ExternalRoot undefined
	}

	ConfigFile `@(this.IdentityPath->GetPath())/@(Repository.Type).MRepo`
	{
		&
		{
			Repository.ConfigFile undefined
			!Repository.Type "Root"
		}
	}
	StateFile `@(this.IdentityPath->GetPath())/@(Repository.Type).MRepoState`
	{
		&
		{
			Repository.StateFile undefined
			!Repository.Type "Root"
		}
	}
	Prefix define string = ""
	Prefix Repository.DefaultPrefix
	{
		&
		{
			Repository.Prefix undefined
			!Repository.DefaultPrefix undefined
		}
	}

	ProtectedBranches =+ "protected/*"

	ProtectedBranches =+ "malterlib_*"
	{
		!!Repository.Type "External"
	}

	ProtectedTags =+ "malterlib_*"
	{
		!!Repository.Type "External"
	}

	URL `@(Repository.ExternalRoot)/@(this.Identity).git`
	{
		&
		{
			Repository.URL undefined
			Repository.Type "External"
		}
	}
	URL `@(Repository.MalterlibRoot)/Malterlib_@(this.Identity).git`
	{
		&
		{
			Repository.URL undefined
			Repository.Type "Malterlib"
		}
	}
	URL `@(Repository.DefaultRoot)/@(Repository.Prefix)@(this.Identity).git`
	{
		&
		{
			Repository.URL undefined
			Repository.Type "Direct"
		}
	}
	Location `@("../../../External"->MakeAbsolute())/@(this.Identity->ParseFormatString("{}_{}", "{}/{}"))`
	{
		&
		{
			Repository.Location undefined
			Repository.Type "External"
			Repository.ConvertUnderscoreToPath true
		}
	}
	Location `@("../../../External"->MakeAbsolute())/@(this.Identity)`
	{
		&
		{
			Repository.Location undefined
			Repository.Type "External"
		}
	}

	Location `@("../../../Malterlib"->MakeAbsolute())/@(this.Identity)`
	{
		&
		{
			Repository.Location undefined
			Repository.Type "Malterlib"
		}
	}

	LocationPrefix define string = ""
	LocationPrefix Repository.DefaultLocationPrefix
	{
		&
		{
			Repository.LocationPrefix undefined
			!Repository.DefaultLocationPrefix undefined
		}
	}
	Location `../../../@(Repository.LocationPrefix)@(this.Identity)`->MakeAbsolute()
	{
		&
		{
			Repository.Location undefined
			Repository.Type "Direct"
		}
	}
	DefaultBranch "malterlib"
	{
		&
		{
			Repository.DefaultBranch undefined
			Repository.Type "External"
		}
	}
	DefaultBranch "master"
	{
		!!Repository.DefaultBranch undefined
	}

	DefaultUpstreamBranch "master"
	{
		&
		{
			Repository.DefaultUpstreamBranch undefined
			Repository.Type "External"
		}
	}

	DefaultUpstreamBranch Repository.DefaultBranch
	{
		!!Repository.DefaultUpstreamBranch undefined
	}

	Submodule false
	{
		!!Repository.Submodule undefined
	}

	SubmodulePrefix define string = ""
	SubmodulePrefix Repository.DefaultPrefix
	{
		&
		{
			Repository.SubmodulePrefix undefined
			!Repository.DefaultPrefix undefined
		}
	}
	SubmoduleName `External_@(this.Identity)`
	{
		&
		{
			Repository.SubmoduleName undefined
			Repository.Type "External"
		}
	}
	SubmoduleName `Malterlib_@(this.Identity)`
	{
		&
		{
			Repository.SubmoduleName undefined
			Repository.Type "Malterlib"
		}
	}
	SubmoduleName `@(Repository.SubmodulePrefix)@(this.Identity)`
	{
		&
		{
			Repository.SubmoduleName undefined
			Repository.Type "Direct"
		}
	}
}
