// Copyright Â© 2017 Nonna Holding AB
// Distributed under the MIT license, see license text in LICENSE.Malterlib

Property
{
	MalterlibCompiledFiles define string
	MalterlibUseGitRepo define bool = true
	MalterlibChangingBootstrapVersion define bool?
}

// Windows paths
Property
{
	!!HostPlatformFamily "Windows"

	MalterlibCompiledFiles "X:/CompiledFiles/"
	{
		&
		{
			MalterlibCompiledFiles undefined
			![] "X:/"->FindDirectoriesIn("CompiledFiles")
		}
	}
	MalterlibCompiledFiles `@(HOMEPATH)/.CompiledFiles/`
	{
		!!MalterlibCompiledFiles undefined
	}
	MalterlibCompiledFiles MalterlibCompiledFiles->UnixPath()
	{
		!MalterlibCompiledFiles undefined
	}
}

// Unix paths
Property
{
	!HostPlatformFamily "Windows"

	MalterlibCompiledFiles "/opt/CompiledFiles/"
	{
		&
		{
			MalterlibCompiledFiles undefined
			![] "/opt"->FindDirectoriesIn("CompiledFiles")
		}
	}
	MalterlibCompiledFiles "/CompiledFiles/"
	{
		&
		{
			MalterlibCompiledFiles undefined
			![] "/"->FindDirectoriesIn("CompiledFiles")
		}
	}

	MalterlibCompiledFiles `@(HOME)/.CompiledFiles/`
	{
		!!MalterlibCompiledFiles undefined
	}
}

Property
{
	MaltelibBasePathAbsolute define string = Builtin.BasePathAbsolute
	MaltelibBasePathName define string = MaltelibBasePathAbsolute->GetFile()

	MalterlibCompiledFilesSourceBase define string = `@(MalterlibCompiledFiles)@(MaltelibBasePathName)-@(Builtin.GeneratedBuildSystemDir->HashSHA256(8))`
	GeneratedGlobalDirectory define string = `@(MalterlibCompiledFilesSourceBase)/Generated/`

	MalterlibIsGitRepository define bool = false
	MalterlibIsGitRepository true
	{
		&
		{
			!MalterlibChangingBootstrapVersion true
			![] Builtin.BasePathAbsolute->FindDirectoriesIn(".git")
		}
	}

	MalterlibGitRepoGitDir define string = `@(Builtin.BasePathAbsolute)/.git`

	MalterlibGitOriginRemote define string = ""
	MalterlibGitOriginRemote ExecuteCommand(`@(GeneratedGlobalDirectory)GitOriginRemote.MState`, [`@(MalterlibGitRepoGitDir)/config`], "git", "remote", "get-url", "origin")
	{
		!!MalterlibIsGitRepository true
	}
	MalterlibGitOriginRemote MalterlibGitOriginRemote->FindGetLine("*")
	{
		!!MalterlibIsGitRepository true
	}
}

Type
{
	CRemotePrefix define {
		Name: string
		, UrlPrefix: string
		, Write: bool = false
	}

	CRemote define {
		Name: string
		, URL: string
		, Write: bool = false
	}
}

Property
{
	f_MalterlibRemotePrefixesTemplate function(type(CRemotePrefix) _Element) [type(CRemote)] = []
	f_MalterlibRemotePrefixesTemplate =+ {Name: _Element<Name>, URL: `@(_Element<UrlPrefix>)/@(RepoName)`, Write: _Element<Write>}
	{
		!_Element undefined
	}
}

Property
{
	MalterlibModules define [string] = []
	MalterlibModules =+ "CoreRepository"

	MalterlibRemotePrefixes define [type(CRemotePrefix)]? // User(Repository)= += [{Name: "remoteexample", UrlPrefix: "https://gitlab.example.com/Malterlib"}]: Specify extra Malterlib remotes

	MalterlibUpstreamAccess define bool = false // User(Repository)=true: Set to true if you have access to https://github.com/Malterlib
	MalterlibUpstreamAccess undefined
	{
		!!MalterlibUpstreamAccess undefined
	}

	MalterlibUpstreamWriteAccess define bool = false // User(Repository)=true: Set to true if you have write access to https://github.com/Malterlib
}

%Repository MalterlibModules->Unique()
{
	!MalterlibUseGitRepo false

	Property.RepoName define string = `Malterlib_@(this.Identity).git`

	Repository
	{
		Type "Malterlib"
		Remotes =+ MalterlibRemotePrefixes->ForEach("f_MalterlibRemotePrefixesTemplate")
		{
			!MalterlibRemotePrefixes undefined
		}
		Remotes =+ {Name: "malterlib", URL: `https://github.com/Malterlib/@(RepoName)`, Write: MalterlibUpstreamWriteAccess}
		{
			&
			{
				MalterlibUpstreamAccess true
				!Repository.URL `https://github.com/Malterlib/@(RepoName)`
			}
		}
		ConfigFile `@("../.."->MakeAbsolute())/@(Repository.Type).MRepo`
		{
			!!this.Identity "CoreRepository"
		}
		StateFile `@("../.."->MakeAbsolute())/@(Repository.Type).MRepoState`
		{
			!!this.Identity "CoreRepository"
		}
	}
}


Property
{
	MalterlibBinaryRepositories define [string] = []
	MalterlibBinaryRepositories =+ `MalterlibBinaries_@(HostPlatformFamily)_@(HostArchitecture)`

	MalterlibAllBinaryRepositories define bool = false // User(Repository)=true: Set to true to sync all binary repositories.
}

Property
{
	!!MalterlibAllBinaryRepositories true

	MalterlibBinaryRepositories =+ "MalterlibBinaries_OSX_x64"
	MalterlibBinaryRepositories =+ "MalterlibBinaries_OSX_arm64"
	MalterlibBinaryRepositories =+ "MalterlibBinaries_Linux_x64"
	MalterlibBinaryRepositories =+ "MalterlibBinaries_Linux_x86"
	MalterlibBinaryRepositories =+ "MalterlibBinaries_Windows_x64"
	MalterlibBinaryRepositories =+ "MalterlibBinaries_Windows_x86"
}

%Repository "."
{
	!!MalterlibIsGitRepository true

	Repository
	{
		Type "Root"
		Location Builtin.BasePathAbsolute
		URL MalterlibGitOriginRemote
		ExcludeFromSeen true
	}
}

%Repository MalterlibBinaryRepositories->Unique()
{
	Property
	{
		RepoName define string = `@(this.Identity).git`
		RepoPlatformFamily define string = this.Identity->ParseFormatString("{}_{}_{}", "{1}")
		RepoArchitecture define string = this.Identity->ParseFormatString("{}_{}_{}", "{2}")
		RepoDir define string = `../../Binaries/Malterlib/@(RepoPlatformFamily)/@(RepoArchitecture)`
	}
	Repository
	{
		Type "Malterlib"
		Location RepoDir->MakeAbsolute()
		URL `@(Repository.MalterlibRoot)/@(RepoName)`
		Remotes =+ MalterlibRemotePrefixes->ForEach("f_MalterlibRemotePrefixesTemplate")
		{
			!MalterlibRemotePrefixes undefined
		}
		Remotes =+ {Name: "malterlib", URL: `https://github.com/Malterlib/@(RepoName)`, Write: MalterlibUpstreamWriteAccess}
		{
			&
			{
				MalterlibUpstreamAccess true
				!Repository.URL `https://github.com/Malterlib/@(RepoName)`
			}
		}
	}
}

%GenerateFile "mib"
{
	!true "."->FindFilesIn("mib")->IsEmpty()

	Property
	{
		MibScriptFile define string = `@(Builtin.BasePathAbsolute)/mib`
		SourceScriptFile define string = "mib"->MakeAbsolute()
	}

	GenerateFile
	{
		Name MibScriptFile
		Contents ReadFile(SourceScriptFile)
		Executable true
		UnixLineEnds true
		UnicodeBOM false
	}
}
